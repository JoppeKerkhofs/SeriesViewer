import { app, BrowserWindow, webContents } from 'electron';
import { session, ipcMain } from 'electron';
import { URL } from 'url';
import fs from 'fs';
import path from 'path';
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// import the api calls
import { searchShow, searchSeason, searchEpisode } from './api/omdbCalls';
import { getOnlineImage } from './api/onlineImage';

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    width: 2000,
    height: 1000,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      nodeIntegration: true,
      contextIsolation: false,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
  mainWindow.setBackgroundColor('#f8fafc');

  // Open the DevTools.
  mainWindow.webContents.openDevTools();

  ipcMain.on('get-show', (event, name) => {
    searchShow(name).then((data) => {
      event.reply('get-show', data);
    });
  });

  ipcMain.on('get-season', (event, name, seasonNumber) => {
    searchSeason(name, seasonNumber).then((data) => {
      event.reply('get-season', data);
    });
  });

  ipcMain.on('get-episode', (event, name, seasonNumber, episodeNumber) => {
    searchEpisode(name, seasonNumber, episodeNumber).then((data) => {
      event.reply('get-episode', data);
    });
  });

  ipcMain.on('get-online-image', (event, url, location) => {
    // get the poster
    getOnlineImage(url, location).then((poster: string) => {
      event.reply('get-online-image', poster);
    });
  });

  ipcMain.on('load-local-file', (event, { location, requestId }) => {
    // get the file
    const filePath = location;
    // if the file is an image file, read it as a data url
    if (filePath.endsWith('.jpg') || filePath.endsWith('.png')) {
        fs.readFile(filePath, (err, data) => {
            if (err) {
                console.error('Error reading file:', err);
                event.reply(`load-local-file-${requestId}`, 'error');
            } else {
                const dataUrl = `data:image/${path.extname(filePath).slice(1)};base64,${data.toString('base64')}`;
                event.reply(`load-local-file-${requestId}`, dataUrl);
            }
        });
    } else {
        // if the file is not an image file, read it as a text file
        fs.readFile(filePath, 'utf8', (err, data) => {
            if (err) {
                console.error('Error reading file:', err);
                event.reply(`load-local-file-${requestId}`, 'error');
            } else {
                event.reply(`load-local-file-${requestId}`, data);
            }
        });
    }
  }); 
};

app.on('ready', () => {
  // Create the browser window.
  createWindow();
});

app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }

  // Set the permission request handler
  session.defaultSession.setPermissionRequestHandler((webContents, permission, callback) => {
    const parsedUrl = new URL(webContents.getURL());

    // Check if the request comes from OMDB API
    if (permission === 'notifications' && parsedUrl.origin === 'https://www.omdbapi.com/') {
        callback(true); // Allow the permission request
    } else {
        callback(false); // Deny the permission request
    }
  });
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
