import { app, BrowserWindow, webContents } from 'electron';
const { session, ipcMain } = require('electron');
const { URL } = require('url');
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// import the api calls
import { searchShow, searchSeason, searchEpisode } from './api/omdbCalls';

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    width: 2000,
    height: 1000,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      nodeIntegration: true,
      contextIsolation: false,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();

  ipcMain.on('get-show', (event, name) => {
    searchShow(name).then((data) => {
      event.reply('get-show', data);
    });
  });

  ipcMain.on('get-season', (event, name, seasonNumber) => {
    searchSeason(name, seasonNumber).then((data) => {
      event.reply('get-season', data);
    });
  });

  ipcMain.on('get-episode', (event, name, seasonNumber, episodeNumber) => {
    searchEpisode(name, seasonNumber, episodeNumber).then((data) => {
      event.reply('get-episode', data);
    });
  });
};

app.on('ready', createWindow);

app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }

  session.defaultSession.setPermissionRequestHandler((webContents, permission, callback) => {
    const parsedUrl = new URL(webContents.getURL());

    // Check if the request comes from OMDB API
    if (permission === 'notifications' && parsedUrl.origin === 'https://www.omdbapi.com/') {
        callback(true); // Allow the permission request
    } else {
        callback(false); // Deny the permission request
    }
});
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
